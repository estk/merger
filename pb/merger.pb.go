// Code generated by protoc-gen-go. DO NOT EDIT.
// source: merger.proto

/*
Package merger is a generated protocol buffer package.

It is generated from these files:
	merger.proto

It has these top-level messages:
	EventRequest
	DataWrapper
	Trace
	DataMeta
	Empty
*/
package merger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventRequest struct {
	Payload []*DataWrapper `protobuf:"bytes,1,rep,name=payload" json:"payload,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventRequest) GetPayload() []*DataWrapper {
	if m != nil {
		return m.Payload
	}
	return nil
}

type DataWrapper struct {
	Trace *Trace    `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty"`
	Meta  *DataMeta `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	Data  []byte    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataWrapper) Reset()                    { *m = DataWrapper{} }
func (m *DataWrapper) String() string            { return proto.CompactTextString(m) }
func (*DataWrapper) ProtoMessage()               {}
func (*DataWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataWrapper) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *DataWrapper) GetMeta() *DataMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DataWrapper) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Trace struct {
	Id     string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Traces []*Trace `protobuf:"bytes,2,rep,name=traces" json:"traces,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Trace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trace) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type DataMeta struct {
	Schema  string `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *DataMeta) Reset()                    { *m = DataMeta{} }
func (m *DataMeta) String() string            { return proto.CompactTextString(m) }
func (*DataMeta) ProtoMessage()               {}
func (*DataMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DataMeta) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *DataMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*EventRequest)(nil), "merger.EventRequest")
	proto.RegisterType((*DataWrapper)(nil), "merger.DataWrapper")
	proto.RegisterType((*Trace)(nil), "merger.Trace")
	proto.RegisterType((*DataMeta)(nil), "merger.DataMeta")
	proto.RegisterType((*Empty)(nil), "merger.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MergeService service

type MergeServiceClient interface {
	PartialEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Empty, error)
	CompleteEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Empty, error)
}

type mergeServiceClient struct {
	cc *grpc.ClientConn
}

func NewMergeServiceClient(cc *grpc.ClientConn) MergeServiceClient {
	return &mergeServiceClient{cc}
}

func (c *mergeServiceClient) PartialEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/merger.MergeService/PartialEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeServiceClient) CompleteEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/merger.MergeService/CompleteEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MergeService service

type MergeServiceServer interface {
	PartialEvents(context.Context, *EventRequest) (*Empty, error)
	CompleteEvents(context.Context, *EventRequest) (*Empty, error)
}

func RegisterMergeServiceServer(s *grpc.Server, srv MergeServiceServer) {
	s.RegisterService(&_MergeService_serviceDesc, srv)
}

func _MergeService_PartialEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServiceServer).PartialEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merger.MergeService/PartialEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServiceServer).PartialEvents(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MergeService_CompleteEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServiceServer).CompleteEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merger.MergeService/CompleteEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServiceServer).CompleteEvents(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MergeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merger.MergeService",
	HandlerType: (*MergeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PartialEvents",
			Handler:    _MergeService_PartialEvents_Handler,
		},
		{
			MethodName: "CompleteEvents",
			Handler:    _MergeService_CompleteEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merger.proto",
}

func init() { proto.RegisterFile("merger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xda, 0xa6, 0x3a, 0x49, 0x8b, 0x8c, 0x22, 0x8b, 0xa7, 0xb0, 0x2a, 0xe4, 0x62,
	0x0f, 0x11, 0xf4, 0xa2, 0x5e, 0xb4, 0xc7, 0x82, 0xac, 0x82, 0xe7, 0x31, 0x19, 0x34, 0x90, 0x34,
	0xeb, 0x66, 0x0d, 0xf4, 0xe4, 0x5f, 0x97, 0x6e, 0x13, 0x09, 0xde, 0xbc, 0xed, 0xcc, 0x9b, 0xf7,
	0xbd, 0x61, 0x16, 0xa2, 0x8a, 0xcd, 0x3b, 0x9b, 0x85, 0x36, 0xb5, 0xad, 0x31, 0xd8, 0x55, 0xf2,
	0x0e, 0xa2, 0x65, 0xcb, 0x6b, 0xab, 0xf8, 0xf3, 0x8b, 0x1b, 0x8b, 0x97, 0x30, 0xd5, 0xb4, 0x29,
	0x6b, 0xca, 0x85, 0x17, 0x8f, 0x92, 0x30, 0x3d, 0x5a, 0x74, 0xbe, 0x47, 0xb2, 0xf4, 0x6a, 0x48,
	0x6b, 0x36, 0xaa, 0x9f, 0x91, 0x25, 0x84, 0x83, 0x3e, 0x9e, 0xc1, 0xc4, 0x1a, 0xca, 0x58, 0x78,
	0xb1, 0x97, 0x84, 0xe9, 0xac, 0xf7, 0xbe, 0x6c, 0x9b, 0x6a, 0xa7, 0xe1, 0x39, 0x8c, 0x2b, 0xb6,
	0x24, 0x46, 0x6e, 0xe6, 0x70, 0xc8, 0x5f, 0xb1, 0x25, 0xe5, 0x54, 0x44, 0x18, 0xe7, 0x64, 0x49,
	0x8c, 0x63, 0x2f, 0x89, 0x94, 0x7b, 0xcb, 0x7b, 0x98, 0x38, 0x12, 0xce, 0xc1, 0x2f, 0x72, 0x17,
	0x72, 0xa0, 0xfc, 0x22, 0xc7, 0x0b, 0x08, 0x1c, 0xbb, 0x11, 0xbe, 0x5b, 0xfa, 0x4f, 0x70, 0x27,
	0xca, 0x5b, 0xd8, 0xef, 0x53, 0xf0, 0x04, 0x82, 0x26, 0xfb, 0xe0, 0x8a, 0x3a, 0x4c, 0x57, 0xa1,
	0x80, 0x69, 0xcb, 0xa6, 0x29, 0xea, 0xb5, 0xf0, 0x9d, 0xd0, 0x97, 0x72, 0x0a, 0x93, 0x65, 0xa5,
	0xed, 0x26, 0xfd, 0x86, 0x68, 0xb5, 0xc5, 0x3f, 0xb3, 0x69, 0x8b, 0x8c, 0xf1, 0x1a, 0x66, 0x4f,
	0x64, 0x6c, 0x41, 0xa5, 0x3b, 0x65, 0x83, 0xc7, 0x7d, 0xfc, 0xf0, 0xb4, 0xa7, 0xbf, 0x4b, 0x39,
	0x8a, 0xdc, 0xc3, 0x1b, 0x98, 0x3f, 0xd4, 0x95, 0x2e, 0xd9, 0xf2, 0xbf, 0x8c, 0x6f, 0x81, 0xfb,
	0xc3, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xe8, 0x92, 0x4a, 0xd3, 0x01, 0x00, 0x00,
}
